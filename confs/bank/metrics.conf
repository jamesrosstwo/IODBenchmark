continual {
  IntersectionOverUnion {
    cls = src.metrics.continual.iou.IntersectionOverUnion,
    invert = true,
    result_keys {
      pred_bbox = "pred_bbox",
      gt_bbox = "gt_bbox"
    }
  }

  FastRCNNLoss {
    cls = src.metrics.continual.fastrcnn.FastRCNNLoss,
    class_weight = 1.0,
    box_weight = 1.0,
    result_keys {
      box_regression = "proposed_box_regression",
      regression_targets = "box_regression_targets",
      class_logits = "proposed_class_logits",
      labels = "unfiltered_labels",
    }
  }

  mAP50 {
    cls = src.metrics.continual.map.MeanAveragePrecision,
    threshold = 0.5,
    result_keys {
      pred_bbox = "pred_bbox",
      pred_labels = "pred_labels",
      gt_bbox = "gt_bbox"
      gt_labels = "gt_labels"
      x_shape = "x_shape"
    }
  }

  mAP75 {
    cls = src.metrics.continual.map.MeanAveragePrecision,
    result_keys = ${continual.mAP50.result_keys},
    threshold = 0.75,
  }
  mAP25 {
    cls = src.metrics.continual.map.MeanAveragePrecision,
    result_keys = ${continual.mAP50.result_keys},
    threshold = 0.25,
  }
  mAP90 {
    cls = src.metrics.continual.map.MeanAveragePrecision,
    result_keys = ${continual.mAP50.result_keys},
    threshold = 0.9,
  }
  FastRCNNLoss {
    cls = src.metrics.continual.fastrcnn.FastRCNNLoss,
    class_weight = 1.0,
    box_weight = 1.0,
    result_keys {
      box_regression = "proposed_box_regression",
      regression_targets = "box_regression_targets",
      class_logits = "proposed_class_logits",
      labels = "unfiltered_labels",
    }
  }
}

final {
  Forgetting {
    cls = src.metrics.final.forgetting.Forgetting,
    tracked_metrics = [
      mAP25,
      mAP50,
      mAP75,
      mAP90,
      FastRCNNLoss
    ]
  }

  BWT {
    cls = src.metrics.final.bwt.BackwardsWeightTransfer,
    tracked_metrics = ${final.Forgetting.tracked_metrics}
  }
}