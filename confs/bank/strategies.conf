
Naive {
  strategy = src.strategies.naive.NaiveStrategy,
  batch_size = 12,
  epochs_per_split = [30, 30, 30, 30],
  model {
    min_size = 480,
    max_size = 640
  }
}

DDPTest {
  strategy = src.strategies.ddp_test.DDPTestStrategy
  batch_size = 12,
  epochs_per_split = 10,
  model {
    min_size = 480,
    max_size = 640
  }
}


NaiveFull {
  strategy = "src.strategies.naive.NaiveStrategy"
  batch_size = 2
  epochs_per_split = [
    50
    12
    12
    12
  ]
  model {
    freeze_backbone = False
  }
}

Offline {
  strategy = "src.strategies.offline.OfflineStrategy"
  batch_size = 12
  checkpoint_interval = 10
  epochs_per_split = 10
  model {
    min_size = 480,
    max_size = 640
  }
}

EWC {
  strategy = src.strategies.ewc.ElasticWeightConsolidation,
  batch_size = 12
  epochs_per_split = 30,
  lambda = 0.1,
  decay_factor = 1,
  separate_penalties = true,
  model {
    min_size = 480,
    max_size = 640
  }
}

EWCFull {
  strategy = "src.strategies.ewc.ElasticWeightConsolidation"
  batch_size = 2
  epochs_per_split = [
    20,
    20,
    20,
    20
  ]
  model {
    freeze_backbone = False
  }
  lambda = 0.1
  decay_factor = 1
  separate_penalties = true
}

iCaRL {
  strategy = "src.strategies.replay.icarl.ICaRLStrategy"
  batch_size = 12
  epochs_per_split = 30,
  exemplars_per_class = 25
  replay_epochs = 10
  plot_memory = True
  model {
    min_size = 480,
    max_size = 640
  }
  name = "iCaRL"
}

iCaRLFull {
  strategy = "src.strategies.replay.icarl.ICaRLStrategy"
  batch_size = 2
  epochs_per_split = 30
  model {
    freeze_backbone = False
  }
  exemplars_per_class = 30
  replay_epochs = 12
  plot_memory = true
}

GlobalMixture {
  strategy = "src.strategies.global_mixture.GlobalMixtureStrategy"
  batch_size = 12,
  epochs_per_split = 30,
  plot_memory = true
  exemplars_per_class = 25,
  replay_epochs = 12
  buffer {
    cls = src.utils.memory.MemoryBuffer
  }
  model {
    min_size = 480,
    max_size = 640
  }
}


Mixture {
  strategy = "src.strategies.replay.mixture.GaussianMixtureStrategy"
  batch_size = 12,
  epochs_per_split = 30,
  plot_memory = true
  exemplars_per_class = 20,
  replay_epochs = 12
  buffer {
    cls = src.utils.memory.MemoryBuffer
  }
  model {
    min_size = 480,
    max_size = 640
  }
}

MixtureFull {
  strategy = "src.strategies.replay.mixture.GaussianMixtureStrategy"
  batch_size = 2
  epochs_per_split = [
    40
    12
    12
    12
  ]
  model {
    freeze_backbone = False
  }
  plot_memory = true
  exemplars_per_class = 30
  replay_epochs = 12
  buffer {
    cls = "src.utils.memory.MemoryBuffer"
  }
}

RandomReplay {
  strategy = "src.strategies.replay.random.RandomReplayStrategy"
  replay_epochs = 10
  batch_size = 12
  exemplars_per_split = 500
  epochs_per_split = [
    20
    5
    5
    5
  ]
  buffer {
    cls = "src.utils.memory.MemoryBuffer"
  }
  model {
    min_size = 480
    max_size = 640
  }
}

CompressedRandomReplay {
  strategy = "src.strategies.replay.random.CompressedRandomReplayStrategy"
  batch_size = 12
  epochs_per_split = [20, 5, 5, 5],
  buffer {
    cls = src.strategies.replay.buffer.JPEGBuffer
    quality = 60
  }
  model {
    min_size = 480,
    max_size = 640
  }
}


ContextTransformer {
  strategy = src.strategies.context_transformer.strategy.ContextTransformer,
  batch_size = 16
  epochs_per_split = 5
  lr = 0.004
  steps = [120000, 150000]
  warmup_iter = 5000
  momentum = 0.9
  weight_decay = 0.0005
  gamma = 0.1
  phase = 1
  checkpoint_period = 10000
  max_iter = 180000
  save-suffix = "context_transformer"
  dtst {
    steps = [8, 16, 32, 64, 100, 300]
    feature_maps = [38, 19, 10, 5, 3, 1],
    min_dim = 300,
    min_sizes = [21, 45, 99, 153, 207, 261],
    max_sizes = [45, 99, 153, 207, 261, 315],
    aspect_ratios = [[2, 3], [2, 3], [2, 3], [2, 3], [2], [2]],
    variance = [0.1, 0.2],
    clip = true,
  }

  eval {
    thresh = 0.01,
    max_per_image = 200
  }

}

AcharyaKanan {
  strategy = src.strategies.acharya_kanan.AcharyaKanan,
}



